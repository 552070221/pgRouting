# SOME DESCRIPTIVE TITLE.
# Copyright (C) pgRouting Contributors - Version v2.5.0-dev
# This file is distributed under the same license as the pgRouting package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pgRouting v2.5.0-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-30 08:27-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../dijkstra-family.rst:13
msgid "Dijkstra - Family of functions"
msgstr ""

#: ../../dijkstra-family.rst:17
msgid ":ref:`pgr_dijkstra` - Dijkstra's algorithm for the shortest paths."
msgstr ""

#: ../../dijkstra-family.rst:18
msgid ":ref:`pgr_dijkstraCost` - Get the aggregate cost of the shortest paths."
msgstr ""

#: ../../dijkstra-family.rst:19
msgid ":ref:`pgr_dijkstraCostMatrix` - Use pgr_dijkstra to create a costs matrix."
msgstr ""

#: ../../dijkstra-family.rst:20
msgid ""
":ref:`pgr_drivingDistance` - Use pgr_dijkstra to calculate catchament "
"information."
msgstr ""

#: ../../dijkstra-family.rst:21
msgid ""
":ref:`pgr_ksp` - Use Yen algorithm with pgr_dijkstra to get the K "
"shortest paths."
msgstr ""

#: ../../dijkstra-family.rst:22
msgid ":ref:`pgr_dijkstraVia` - Get a route of a seuence of vertices."
msgstr ""

#: ../../dijkstra-family.rst:39
msgid "The problem definition (Advanced documentation)"
msgstr ""

#: ../../dijkstra-family.rst:42
msgid "Given the following query:"
msgstr ""

#: ../../dijkstra-family.rst:45
msgid "pgr_dijkstra(:math:`sql, start_{vid}, end_{vid}, directed`)"
msgstr ""

#: ../../dijkstra-family.rst:47
msgid ""
"where  :math:`sql = \\{(id_i, source_i, target_i, cost_i, "
"reverse\\_cost_i)\\}`"
msgstr ""

#: ../../dijkstra-family.rst:49
msgid "and"
msgstr ""

#: ../../dijkstra-family.rst:51
msgid ":math:`source = \\bigcup source_i`,"
msgstr ""

#: ../../dijkstra-family.rst:52
msgid ":math:`target = \\bigcup target_i`,"
msgstr ""

#: ../../dijkstra-family.rst:54
msgid "The graphs are defined as follows:"
msgstr ""

#: ../../dijkstra-family.rst:57
msgid "Directed graph"
msgstr ""

#: ../../dijkstra-family.rst:58
msgid "The weighted directed graph, :math:`G_d(V,E)`, is definied by:"
msgstr ""

#: ../../dijkstra-family.rst:60 ../../dijkstra-family.rst:74
msgid "the set of vertices  :math:`V`"
msgstr ""

#: ../../dijkstra-family.rst:62
msgid ":math:`V = source \\cup target \\cup {start_{vid}} \\cup  {end_{vid}}`"
msgstr ""

#: ../../dijkstra-family.rst:64 ../../dijkstra-family.rst:79
msgid "the set of edges :math:`E`"
msgstr ""

#: ../../dijkstra-family.rst:66
msgid ""
":math:`E = \\begin{cases} &\\{(source_i, target_i, cost_i) \\text{ when }"
" cost >=0 \\} &\\quad  \\text{ if } reverse\\_cost = \\varnothing \\\\ "
"\\\\ &\\{(source_i, target_i, cost_i) \\text{ when } cost >=0 \\} \\\\ "
"\\cup &\\{(target_i, source_i, reverse\\_cost_i) \\text{ when } "
"reverse\\_cost_i >=0)\\} &\\quad \\text{ if } reverse\\_cost \\neq "
"\\varnothing \\\\ \\end{cases}`"
msgstr ""

#: ../../dijkstra-family.rst:71
msgid "Undirected graph"
msgstr ""

#: ../../dijkstra-family.rst:72
msgid "The weighted undirected graph, :math:`G_u(V,E)`, is definied by:"
msgstr ""

#: ../../dijkstra-family.rst:76
msgid ":math:`V = source \\cup target \\cup {start_v{vid}} \\cup  {end_{vid}}`"
msgstr ""

#: ../../dijkstra-family.rst:81
msgid ""
":math:`E = \\begin{cases} &\\{(source_i, target_i, cost_i) \\text{ when }"
" cost >=0 \\} \\\\ \\cup &\\{(target_i, source_i, cost_i) \\text{ when } "
"cost >=0 \\}  &\\quad  \\text{ if } reverse\\_cost = \\varnothing \\\\ "
"\\\\ &\\{(source_i, target_i, cost_i) \\text{ when } cost >=0 \\} \\\\ "
"\\cup &\\{(target_i, source_i, cost_i) \\text{ when } cost >=0 \\} \\\\ "
"\\cup &\\{(target_i, source_i, reverse\\_cost_i) \\text{ when } "
"reverse\\_cost_i >=0)\\} \\\\ \\cup &\\{(source_i, target_i, "
"reverse\\_cost_i) \\text{ when } reverse\\_cost_i >=0)\\} &\\quad \\text{"
" if } reverse\\_cost \\neq \\varnothing \\\\ \\end{cases}`"
msgstr ""

#: ../../dijkstra-family.rst:86
msgid "The problem"
msgstr ""

#: ../../dijkstra-family.rst:87
msgid "Given:"
msgstr ""

#: ../../dijkstra-family.rst:89
msgid ":math:`start_{vid} \\in V` a starting vertex"
msgstr ""

#: ../../dijkstra-family.rst:90
msgid ":math:`end_{vid} \\in V` an ending vertex"
msgstr ""

#: ../../dijkstra-family.rst:91
msgid ""
":math:`G(V,E) = \\begin{cases}  G_d(V,E) &\\quad \\text{ if } directed = "
"true \\\\ G_u(V,E) &\\quad \\text{ if } directed = false \\\\ "
"\\end{cases}`"
msgstr ""

#: ../../dijkstra-family.rst:93
msgid "Then:"
msgstr ""

#: ../../dijkstra-family.rst:101
msgid ""
":math:`\\boldsymbol{\\pi} = \\{(path\\_seq_i, node_i, edge_i, cost_i, "
"agg\\_cost_i)\\}`"
msgstr ""

#: ../../dijkstra-family.rst:114
msgid "where:"
msgstr ""

#: ../../dijkstra-family.rst:104
msgid ":math:`path\\_seq_i = i`"
msgstr ""

#: ../../dijkstra-family.rst:105
msgid ":math:`path\\_seq_{| \\pi |} = | \\pi |`"
msgstr ""

#: ../../dijkstra-family.rst:106
msgid ":math:`node_i \\in V`"
msgstr ""

#: ../../dijkstra-family.rst:107
msgid ":math:`node_1 = start_{vid}`"
msgstr ""

#: ../../dijkstra-family.rst:108
msgid ":math:`node_{| \\pi |}  = end_{vid}`"
msgstr ""

#: ../../dijkstra-family.rst:109
msgid ""
":math:`\\forall i \\neq | \\pi |, \\quad (node_i, node_{i+1}, cost_i) "
"\\in E`"
msgstr ""

#: ../../dijkstra-family.rst:110
msgid ""
":math:`edge_i  = \\begin{cases}  id_{(node_i, node_{i+1},cost_i)}  "
"&\\quad  \\text{when } i \\neq | \\pi | \\\\ -1 &\\quad  \\text{when } i "
"= | \\pi | \\\\ \\end{cases}`"
msgstr ""

#: ../../dijkstra-family.rst:111
msgid ":math:`cost_i = cost_{(node_i, node_{i+1})}`"
msgstr ""

#: ../../dijkstra-family.rst:112
msgid ""
":math:`agg\\_cost_i  = \\begin{cases}  0   &\\quad  \\text{when } i = 1  "
"\\\\ \\displaystyle\\sum_{k=1}^{i}  cost_{(node_{k-1}, node_k)}  &\\quad"
"  \\text{when } i \\neq 1 \\\\ \\end{cases}`"
msgstr ""

#: ../../dijkstra-family.rst:120
msgid ""
"In other words: The algorithm returns a the shortest path between "
":math:`start_{vid}` and :math:`end_{vid}` , if it exists, in terms of a "
"sequence of nodes  and of edges,"
msgstr ""

#: ../../dijkstra-family.rst:117
msgid ""
":math:`path\\_seq` indicates the relative position in the path of the "
":math:`node` or :math:`edge`."
msgstr ""

#: ../../dijkstra-family.rst:118
msgid ":math:`cost` is the cost of the edge to be used to go to the next node."
msgstr ""

#: ../../dijkstra-family.rst:119
msgid ""
":math:`agg\\_cost` is the cost from the :math:`start_{vid}` up to the "
"node."
msgstr ""

#: ../../dijkstra-family.rst:122
msgid "If there is no path, the resulting set is empty."
msgstr ""

