# SOME DESCRIPTIVE TITLE.
# Copyright (C) pgRouting Contributors - Version 2.0.0-dev (c11a3d8 develop)
# This file is distributed under the same license as the pgRouting package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pgRouting 2.0.0-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-02 12:41\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/tutorial/index.rst:13
# c5f105d393594ddcbeddd1ea08dae676
msgid "Getting Started"
msgstr ""

#: ../../src/tutorial/index.rst:15
# 106b4375d6cf4093bbd6f9eebe4cbe3e
msgid "This is a simple guide to walk you through the steps of getting started with pgRouting. In this guide we will cover:"
msgstr ""

#: ../../src/tutorial/index.rst:18
#: ../../src/tutorial/index.rst:27
# 788d2007f79b40358cb3c1c1ce1a1035
# 6e793c04eca14ee5b2e9110821b3e9d5
msgid "How to create a database to use for our project"
msgstr ""

#: ../../src/tutorial/index.rst:19
#: ../../src/tutorial/index.rst:61
# 362eae5c60aa43db9d0164852da88610
# 36ddc5d710b147859ded244c02200bb8
msgid "How to load some data"
msgstr ""

#: ../../src/tutorial/index.rst:20
#: ../../src/tutorial/index.rst:77
# c7a3788b6db24896985983e02cc29b9a
# 21ce1e3c4a9a459aa3cead1617fb4851
msgid "How to build a topology"
msgstr ""

#: ../../src/tutorial/index.rst:21
#: ../../src/tutorial/index.rst:93
# 5df1e4066d684b7e9adc8ff48db0da50
# 38046e4fbfdc44a29a898280cfc04e34
msgid "How to check your graph for errors"
msgstr ""

#: ../../src/tutorial/index.rst:22
#: ../../src/tutorial/index.rst:120
# 57737cb14b124fac9d1f48575c212364
# df3c3d18514b4869a8db428625219e9d
msgid "How to compute a route"
msgstr ""

#: ../../src/tutorial/index.rst:23
#: ../../src/tutorial/index.rst:141
# f11e1558080f4665a40ed8733f4d01fb
# d72172d367cc4ca9989986861993a35e
msgid "How to use other tools to view your graph and route"
msgstr ""

#: ../../src/tutorial/index.rst:24
#: ../../src/tutorial/index.rst:146
# 8d1752746d484982a2e771d74a178ca9
# 8b3955de6f1743c0a1375f634d6ff1e8
msgid "How to create a web app"
msgstr ""

#: ../../src/tutorial/index.rst:29
# 509cc02a215c41d08a1378d9d9aadd25
msgid "The first thing we need to do is create a database and load pgrouting in the database. Typically you will create a database for each project. Once you have a database to work in, your can load your data and build your application in that database. This makes it easy to move your project later if you want to to say a production server."
msgstr ""

#: ../../src/tutorial/index.rst:35
# 8f475aed040d4337b8f09ac3fd401047
msgid "For Postgresql 9.1 and later versions"
msgstr ""

#: ../../src/tutorial/index.rst:44
# 94617c990cc44ae6b09a4ac560646113
msgid "For older versions of postgresql"
msgstr ""

#: ../../src/tutorial/index.rst:63
# 0ee971199a8240218c7183d8c2751eac
msgid "How you load your data will depend in what form it comes it. There are various OpenSource tools that can help you, like:"
msgstr ""

#: ../../src/tutorial/index.rst:66
# 6ea341ccbc5047f3977cd0f7e9e4e8c3
msgid "this is the postgresql shapefile loader"
msgstr ""

#: ../../src/tutorial/index.rst:67
# b0a280e4326745518ac389f84be085f5
msgid "this is a vector data conversion utility"
msgstr ""

#: ../../src/tutorial/index.rst:68
# d6b265733bf848e38ebafe1223150aee
msgid "this is a tool for loading OSM data into postgresql"
msgstr ""

#: ../../src/tutorial/index.rst:70
# b7d607871e3b4aaeb4349a3bc2cf9250
msgid "So these tools and probably others will allow you to read vector data and and can load that data into your database as a table of some kind. At this point you need to know a little about your data structure and content. One easy way to browse you data table is with pgAdmin3 or phpPgAdmin."
msgstr ""

#: ../../src/tutorial/index.rst:79
# b0220294a72844bd91e90b85b4d140ff
msgid "Next we need to build a topology for our street data. What this means is that for any given edge in your street data the ends of that edge will be connected to a unique node and to other edges that are also connected to that same unique node. Once all the edges are connected to nodes we have a graph that can be used for routing with pgrouting. We provide a tools the will help with this:"
msgstr ""

#: ../../src/tutorial/index.rst:89
# c164b237238943b39394d0fdbfadf5d9
msgid "See :ref:`pgr_create_topology` for more information."
msgstr ""

#: ../../src/tutorial/index.rst:95
# 4d8ea6f5c22d433686f2fe2a19d9b5b8
msgid "There are lots of possible sources for errors in a graph. The data that you started with may not have been designed with routing in mind. A graph as some very specific requirments. One it that it is *NODED*, this means that except for some very specific use cases, each road segments starts and ends at a node and that in general is does not cross another road segment that it should be connected to."
msgstr ""

#: ../../src/tutorial/index.rst:102
# 5d245005e44b42e6ba1c841c2df41bbb
msgid "There can be other errors like the direction of a one-way street being entered in the wrong direction. We do not have tools to search for all possible errors but we have some basic tools that might help."
msgstr ""

#: ../../src/tutorial/index.rst:112
# ad3a502065cb4760bed2c4c9ce36770a
msgid "See :ref:`analytics` for more information."
msgstr ""

#: ../../src/tutorial/index.rst:114
# 3053cd54f66b4291b54b6f900f7798ed
msgid "If your data needs to be *NODED*, we have a tool that can help for that also."
msgstr ""

#: ../../src/tutorial/index.rst:116
# f05a298468e14915914cd7df12e1b4f4
msgid "See :ref:`pgr_node_network` for more information."
msgstr ""

#: ../../src/tutorial/index.rst:122
# 64a86c67f40e44ab976a6157569f3f5f
msgid "Once you have all the prep work done above, computing a route is fairly easy. We have a lot of different algorithms but they can work with your prepared road network. The general form of a route query is:"
msgstr ""

#: ../../src/tutorial/index.rst:130
# 9f05573c4de14243a76ad541db361b1c
msgid "As you can see this is fairly straight forward and you can look and the specific algorithms for the details on how to use them. What you get as a result from these queries will be a set of record of type ``pgr_costResult`` or ``pgr_geomResult``. These results have information like edge id and/or the node id along with the cost or geometry for the step in the path from *start* to *end*. Using the ids you can join these result back to your edge table to get more information about each step in the path."
msgstr ""

#: ../../src/tutorial/index.rst:138
# 50a49c1f7ef54b56957af19da3bd8fe6
msgid "See also :ref:`type_cost_result` and :ref:`type_geom_result`."
msgstr ""

#: ../../src/tutorial/index.rst:143
#: ../../src/tutorial/index.rst:148
# f47935170c3746e9ad7d907959556d43
# 0484ff5211bd4a9f9dae4b0fd454c061
msgid "TBD"
msgstr ""

