..
   ****************************************************************************
    pgRouting Manual
    Copyright(c) pgRouting Contributors

    This documentation is licensed under a Creative Commons Attribution-Share
    Alike 3.0 License: http://creativecommons.org/licenses/by-sa/3.0/
   ****************************************************************************

..
    only edges start


Description of the SQL query
...............................................................................

:edges_sql: an SQL query, which should return a set of rows with the following columns:

================  ===================   =================================================
Column            Type                  Description
================  ===================   =================================================
**id**            ``ANY-INTEGER``       Identifier of the edge.
**source**        ``ANY-INTEGER``       Identifier of the first end point vertex of the edge.
**target**        ``ANY-INTEGER``       Identifier of the second end point vertex of the edge.
**cost**          ``ANY-NUMERICAL``     Weight of the edge `(source, target)`, If negative: edge `(source, target)` does not exist, therefore it's not part of the graph.
**reverse_cost**  ``ANY-NUMERICAL``     (optional) Weight of the edge `(target, source)`, If negative: edge `(target, source)` does not exist, therefore it's not part of the graph.
================  ===================   =================================================


Where:

:ANY-INTEGER: SMALLINT, INTEGER, BIGINT
:ANY-NUMERICAL: SMALLINT, INTEGER, BIGINT, REAL, FLOAT

..
    only edges end


Description of the parameters of the signatures
...............................................................................

============== ====================== =================================================
Column         Type                   Description
============== ====================== =================================================
**sql**        ``TEXT``               SQL query as decribed above.
**start_vid**  ``BIGINT``             Identifier of the starting vertex of the path.
**start_vids** ``ARRAY[ANY-INTEGER]`` Array of identifiers of starting vertices.
**end_vid**    ``BIGINT``             Identifier of the ending vertex of the path.
**end_vids**   ``ARRAY[ANY-INTEGER]`` Array of identifiers of ending vertices.
**directed**   ``BOOLEAN``            (optional). When ``false`` the graph is considered as Undirected. Default is ``true`` which considers the graph as Directed.
============== ====================== =================================================
