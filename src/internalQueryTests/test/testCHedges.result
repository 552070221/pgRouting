NOTICE:  Returned log message = Original: 
id = 1	source = 1	target = 2	cost = 1	reverse_cost = 1)
id = 2	source = 2	target = 3	cost = -1	reverse_cost = 1)
id = 3	source = 3	target = 4	cost = -1	reverse_cost = 1)
id = 4	source = 2	target = 5	cost = 1	reverse_cost = 1)
id = 5	source = 3	target = 6	cost = 1	reverse_cost = -1)
id = 6	source = 7	target = 8	cost = 1	reverse_cost = 1)
id = 7	source = 8	target = 5	cost = 1	reverse_cost = 1)
id = 8	source = 5	target = 6	cost = 1	reverse_cost = 1)
id = 9	source = 6	target = 9	cost = 1	reverse_cost = 1)
id = 10	source = 5	target = 10	cost = 1	reverse_cost = 1)
id = 11	source = 6	target = 11	cost = 1	reverse_cost = -1)
id = 12	source = 10	target = 11	cost = 1	reverse_cost = -1)
id = 13	source = 11	target = 12	cost = 1	reverse_cost = -1)
id = 14	source = 10	target = 13	cost = 1	reverse_cost = 1)
id = 15	source = 9	target = 12	cost = 1	reverse_cost = 1)
id = 16	source = 4	target = 9	cost = 1	reverse_cost = 1)
id = 17	source = 14	target = 15	cost = 1	reverse_cost = 1)
id = 18	source = 16	target = 17	cost = 1	reverse_cost = 1)
Testing Directed ,  insertion using vector
  - Created graph:
  - Inserting Edges:
  - Can do a dijKstra:
Testing Directed ,  insertion using C array
  - Created graph:
  - Inserting Edges:
  - Can do a dijKstra:
Testing Directed ,  creating with vertices, insertion using vector
  - Created graph:
0:  out_edges_of({
    id: 1,
    contracted vertices: {}
}
):
1:  out_edges_of({
    id: 2,
    contracted vertices: {}
}
):
2:  out_edges_of({
    id: 3,
    contracted vertices: {}
}
):
3:  out_edges_of({
    id: 4,
    contracted vertices: {}
}
):
4:  out_edges_of({
    id: 5,
    contracted vertices: {}
}
):
5:  out_edges_of({
    id: 6,
    contracted vertices: {}
}
):
6:  out_edges_of({
    id: 7,
    contracted vertices: {}
}
):
7:  out_edges_of({
    id: 8,
    contracted vertices: {}
}
):
8:  out_edges_of({
    id: 9,
    contracted vertices: {}
}
):
9:  out_edges_of({
    id: 10,
    contracted vertices: {}
}
):
10:  out_edges_of({
    id: 11,
    contracted vertices: {}
}
):
11:  out_edges_of({
    id: 12,
    contracted vertices: {}
}
):
12:  out_edges_of({
    id: 13,
    contracted vertices: {}
}
):
13:  out_edges_of({
    id: 14,
    contracted vertices: {}
}
):
14:  out_edges_of({
    id: 15,
    contracted vertices: {}
}
):
15:  out_edges_of({
    id: 16,
    contracted vertices: {}
}
):
16:  out_edges_of({
    id: 17,
    contracted vertices: {}
}
):
  - Inserting Edges:
0:  out_edges_of({
    id: 1,
    contracted vertices: {}
}
): 1=(1, 2) = 1@t
1:  out_edges_of({
    id: 2,
    contracted vertices: {}
}
): 1=(2, 1) = 1@t 4=(2, 5) = 1@t
2:  out_edges_of({
    id: 3,
    contracted vertices: {}
}
): 2=(3, 2) = 1@t 5=(3, 6) = 1@t
3:  out_edges_of({
    id: 4,
    contracted vertices: {}
}
): 3=(4, 3) = 1@t 16=(4, 9) = 1@t
4:  out_edges_of({
    id: 5,
    contracted vertices: {}
}
): 4=(5, 2) = 1@t 7=(5, 8) = 1@t 8=(5, 6) = 1@t 10=(5, 10) = 1@t
5:  out_edges_of({
    id: 6,
    contracted vertices: {}
}
): 8=(6, 5) = 1@t 9=(6, 9) = 1@t 11=(6, 11) = 1@t
6:  out_edges_of({
    id: 7,
    contracted vertices: {}
}
): 6=(7, 8) = 1@t
7:  out_edges_of({
    id: 8,
    contracted vertices: {}
}
): 6=(8, 7) = 1@t 7=(8, 5) = 1@t
8:  out_edges_of({
    id: 9,
    contracted vertices: {}
}
): 9=(9, 6) = 1@t 15=(9, 12) = 1@t 16=(9, 4) = 1@t
9:  out_edges_of({
    id: 10,
    contracted vertices: {}
}
): 10=(10, 5) = 1@t 12=(10, 11) = 1@t 14=(10, 13) = 1@t
10:  out_edges_of({
    id: 11,
    contracted vertices: {}
}
): 13=(11, 12) = 1@t
11:  out_edges_of({
    id: 12,
    contracted vertices: {}
}
): 15=(12, 9) = 1@t
12:  out_edges_of({
    id: 13,
    contracted vertices: {}
}
): 14=(13, 10) = 1@t
13:  out_edges_of({
    id: 14,
    contracted vertices: {}
}
): 17=(14, 15) = 1@t
14:  out_edges_of({
    id: 15,
    contracted vertices: {}
}
): 17=(15, 14) = 1@t
15:  out_edges_of({
    id: 16,
    contracted vertices: {}
}
): 18=(16, 17) = 1@t
16:  out_edges_of({
    id: 17,
    contracted vertices: {}
}
): 18=(17, 16) = 1@t
  - Can do a dijKstra:
Testing Directed ,  creating with vertices, insertion using C array
  - Created graph:
0:  out_edges_of({
    id: 1,
    contracted vertices: {}
}
):
1:  out_edges_of({
    id: 2,
    contracted vertices: {}
}
):
2:  out_edges_of({
    id: 3,
    contracted vertices: {}
}
):
3:  out_edges_of({
    id: 4,
    contracted vertices: {}
}
):
4:  out_edges_of({
    id: 5,
    contracted vertices: {}
}
):
5:  out_edges_of({
    id: 6,
    contracted vertices: {}
}
):
6:  out_edges_of({
    id: 7,
    contracted vertices: {}
}
):
7:  out_edges_of({
    id: 8,
    contracted vertices: {}
}
):
8:  out_edges_of({
    id: 9,
    contracted vertices: {}
}
):
9:  out_edges_of({
    id: 10,
    contracted vertices: {}
}
):
10:  out_edges_of({
    id: 11,
    contracted vertices: {}
}
):
11:  out_edges_of({
    id: 12,
    contracted vertices: {}
}
):
12:  out_edges_of({
    id: 13,
    contracted vertices: {}
}
):
13:  out_edges_of({
    id: 14,
    contracted vertices: {}
}
):
14:  out_edges_of({
    id: 15,
    contracted vertices: {}
}
):
15:  out_edges_of({
    id: 16,
    contracted vertices: {}
}
):
16:  out_edges_of({
    id: 17,
    contracted vertices: {}
}
):
  - Inserting Edges:
0:  out_edges_of({
    id: 1,
    contracted vertices: {}
}
): 1=(1, 2) = 1@t
1:  out_edges_of({
    id: 2,
    contracted vertices: {}
}
): 1=(2, 1) = 1@t 4=(2, 5) = 1@t
2:  out_edges_of({
    id: 3,
    contracted vertices: {}
}
): 2=(3, 2) = 1@t 5=(3, 6) = 1@t
3:  out_edges_of({
    id: 4,
    contracted vertices: {}
}
): 3=(4, 3) = 1@t 16=(4, 9) = 1@t
4:  out_edges_of({
    id: 5,
    contracted vertices: {}
}
): 4=(5, 2) = 1@t 7=(5, 8) = 1@t 8=(5, 6) = 1@t 10=(5, 10) = 1@t
5:  out_edges_of({
    id: 6,
    contracted vertices: {}
}
): 8=(6, 5) = 1@t 9=(6, 9) = 1@t 11=(6, 11) = 1@t
6:  out_edges_of({
    id: 7,
    contracted vertices: {}
}
): 6=(7, 8) = 1@t
7:  out_edges_of({
    id: 8,
    contracted vertices: {}
}
): 6=(8, 7) = 1@t 7=(8, 5) = 1@t
8:  out_edges_of({
    id: 9,
    contracted vertices: {}
}
): 9=(9, 6) = 1@t 15=(9, 12) = 1@t 16=(9, 4) = 1@t
9:  out_edges_of({
    id: 10,
    contracted vertices: {}
}
): 10=(10, 5) = 1@t 12=(10, 11) = 1@t 14=(10, 13) = 1@t
10:  out_edges_of({
    id: 11,
    contracted vertices: {}
}
): 13=(11, 12) = 1@t
11:  out_edges_of({
    id: 12,
    contracted vertices: {}
}
): 15=(12, 9) = 1@t
12:  out_edges_of({
    id: 13,
    contracted vertices: {}
}
): 14=(13, 10) = 1@t
13:  out_edges_of({
    id: 14,
    contracted vertices: {}
}
): 17=(14, 15) = 1@t
14:  out_edges_of({
    id: 15,
    contracted vertices: {}
}
): 17=(15, 14) = 1@t
15:  out_edges_of({
    id: 16,
    contracted vertices: {}
}
): 18=(16, 17) = 1@t
16:  out_edges_of({
    id: 17,
    contracted vertices: {}
}
): 18=(17, 16) = 1@t
  - Can do a dijKstra:
Testing Undirected ,  insertion using vector
  - Created graph:
  - Inserting Edges:
  - Can do a dijKstra:
Testing Directed ,  insertion using C array
  - Created graph:
  - Inserting Edges:
  - Can do a dijKstra:
Testing Undirected ,  insertion using C array
  - Created graph:
  - Inserting Edges:
  - Can do a dijKstra:
Testing Undirected ,  creating with vertices, insertion using vector
  - Created graph:
0:  out_edges_of({
    id: 1,
    contracted vertices: {}
}
):
1:  out_edges_of({
    id: 2,
    contracted vertices: {}
}
):
2:  out_edges_of({
    id: 3,
    contracted vertices: {}
}
):
3:  out_edges_of({
    id: 4,
    contracted vertices: {}
}
):
4:  out_edges_of({
    id: 5,
    contracted vertices: {}
}
):
5:  out_edges_of({
    id: 6,
    contracted vertices: {}
}
):
6:  out_edges_of({
    id: 7,
    contracted vertices: {}
}
):
7:  out_edges_of({
    id: 8,
    contracted vertices: {}
}
):
8:  out_edges_of({
    id: 9,
    contracted vertices: {}
}
):
9:  out_edges_of({
    id: 10,
    contracted vertices: {}
}
):
10:  out_edges_of({
    id: 11,
    contracted vertices: {}
}
):
11:  out_edges_of({
    id: 12,
    contracted vertices: {}
}
):
12:  out_edges_of({
    id: 13,
    contracted vertices: {}
}
):
13:  out_edges_of({
    id: 14,
    contracted vertices: {}
}
):
14:  out_edges_of({
    id: 15,
    contracted vertices: {}
}
):
15:  out_edges_of({
    id: 16,
    contracted vertices: {}
}
):
16:  out_edges_of({
    id: 17,
    contracted vertices: {}
}
):
  - Inserting Edges:
0:  out_edges_of({
    id: 1,
    contracted vertices: {}
}
): 1=(1, 2) = 1@t
1:  out_edges_of({
    id: 2,
    contracted vertices: {}
}
): 1=(2, 1) = 1@t 4=(2, 5) = 1@t
2:  out_edges_of({
    id: 3,
    contracted vertices: {}
}
): 2=(3, 2) = 1@t 5=(3, 6) = 1@t
3:  out_edges_of({
    id: 4,
    contracted vertices: {}
}
): 3=(4, 3) = 1@t 16=(4, 9) = 1@t
4:  out_edges_of({
    id: 5,
    contracted vertices: {}
}
): 4=(5, 2) = 1@t 7=(5, 8) = 1@t 8=(5, 6) = 1@t 10=(5, 10) = 1@t
5:  out_edges_of({
    id: 6,
    contracted vertices: {}
}
): 8=(6, 5) = 1@t 9=(6, 9) = 1@t 11=(6, 11) = 1@t
6:  out_edges_of({
    id: 7,
    contracted vertices: {}
}
): 6=(7, 8) = 1@t
7:  out_edges_of({
    id: 8,
    contracted vertices: {}
}
): 6=(8, 7) = 1@t 7=(8, 5) = 1@t
8:  out_edges_of({
    id: 9,
    contracted vertices: {}
}
): 9=(9, 6) = 1@t 15=(9, 12) = 1@t 16=(9, 4) = 1@t
9:  out_edges_of({
    id: 10,
    contracted vertices: {}
}
): 10=(10, 5) = 1@t 12=(10, 11) = 1@t 14=(10, 13) = 1@t
10:  out_edges_of({
    id: 11,
    contracted vertices: {}
}
): 13=(11, 12) = 1@t
11:  out_edges_of({
    id: 12,
    contracted vertices: {}
}
): 15=(12, 9) = 1@t
12:  out_edges_of({
    id: 13,
    contracted vertices: {}
}
): 14=(13, 10) = 1@t
13:  out_edges_of({
    id: 14,
    contracted vertices: {}
}
): 17=(14, 15) = 1@t
14:  out_edges_of({
    id: 15,
    contracted vertices: {}
}
): 17=(15, 14) = 1@t
15:  out_edges_of({
    id: 16,
    contracted vertices: {}
}
): 18=(16, 17) = 1@t
16:  out_edges_of({
    id: 17,
    contracted vertices: {}
}
): 18=(17, 16) = 1@t
  - Can do a dijKstra:
Testing Identifiers, creating with vertices, insertion using vector
  - Created graph:
  - Inserting Edges:
  - All vertices:
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, }
  - Contracted vertices:
    {0, 6, 7, 12, 13, 15, }
  - Remaining vertices:
    {1, 2, 3, 4, 5, 8, 9, 10, 11, 14, 16, }
Testing Vertex class, creating graph with vertices, insertion using vector
  - Created graph:
  - Inserting Edges:
  - id ----- V:
  1 ----- 0
  2 ----- 1
  4 ----- 3
  5 ----- 4
  7 ----- 6
  8 ----- 7
  10 ----- 9
  12 ----- 11
  13 ----- 12
  14 ----- 13
  15 ----- 14
  16 ----- 15
  17 ----- 16
  - Dead end contraction:
Vertex 1 is contracted to Vertex 2:
{
    id: 1,
    contracted vertices: {}
}
{
    id: 2,
    contracted vertices: {0, }
}
Vertex 7 is contracted to Vertex 8:
{
    id: 7,
    contracted vertices: {}
}
{
    id: 8,
    contracted vertices: {6, }
}
Vertex 8 is contracted to Vertex 5:
{
    id: 8,
    contracted vertices: {}
}
{
    id: 5,
    contracted vertices: {6, 7, }
}
Vertex 13 is contracted to Vertex 10:
{
    id: 13,
    contracted vertices: {}
}
{
    id: 10,
    contracted vertices: {12, }
}
Vertex 14 is contracted to Vertex 15:
{
    id: 14,
    contracted vertices: {}
}
{
    id: 15,
    contracted vertices: {13, }
}
Vertex 16 is contracted to Vertex 17:
{
    id: 16,
    contracted vertices: {}
}
{
    id: 17,
    contracted vertices: {15, }
}
  - Linear contraction:
Vertex 1 is contracted to edge -1:
{
    id: -1,
    source: 3,
    target: 5,
    cost: 6.90898356e-310,
    first: 64,
    contracted vertices: {0, 1, }
}
Vertex 4 is contracted to edge -2:
{
    id: -2,
    source: 3,
    target: 9,
    cost: 6.90898356e-310,
    first: 96,
    contracted vertices: {3, }
}
Vertex 10 is contracted to edge -3:
{
    id: -3,
    source: 5,
    target: 11,
    cost: 6.90898356e-310,
    first: 144,
    contracted vertices: {9, 12, }
}
Vertex 12 is contracted to edge -4:
{
    id: -4,
    source: 9,
    target: 11,
    cost: 6.95276435e-310,
    first: 200,
    contracted vertices: {11, }
}


t
