# 
msgid ""
msgstr ""
"Project-Id-Version: pgRouting 2.0.0-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-02 12:41\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../src/tsp/doc/index.rst:13
msgid "pgr_tsp - Traveling Sales Person"
msgstr ""

#: ../../../src/tsp/doc/index.rst:23
msgid "Name"
msgstr ""

#: ../../../src/tsp/doc/index.rst:25
msgid ""
"``pgr_tsp`` - Returns the best route from a start node via a list of nodes."
msgstr ""

#: ../../../src/tsp/doc/index.rst:26
msgid ""
"``pgr_tsp`` - Returns the best route order when passed a disance matrix."
msgstr ""

#: ../../../src/tsp/doc/index.rst:27
msgid ""
"``pgr_makeDistanceMatrix`` - Returns a Eucleadian distance Matrix from the "
"points provided in the sql result."
msgstr ""

#: ../../../src/tsp/doc/index.rst:31
msgid "Synopsis"
msgstr ""

#: ../../../src/tsp/doc/index.rst:33
msgid ""
"The travelling salesman problem (TSP) or travelling salesperson problem asks"
" the following question: Given a list of cities and the distances between "
"each pair of cities, what is the shortest possible route that visits each "
"city exactly once and returns to the origin city? This algoritm uses "
"simulated annealing to return a high quality approximate solution. Returns a"
" set of :ref:`pgr_costResult <type_cost_result>` (seq, id1, id2, cost) rows,"
" that make up a path."
msgstr ""

#: ../../../src/tsp/doc/index.rst:41
msgid ""
"Returns a set of (seq integer, id1 integer, id2 integer, cost float8) that "
"is the best order to visit the nodes in the matrix. ``id1`` is the index "
"into the distance matrix. ``id2`` is the point id from the sql."
msgstr ""

#: ../../../src/tsp/doc/index.rst:43
msgid ""
"If no ``end_id`` is supplied or it is -1 or equal to the start_id then the "
"TSP result is assumed to be a circluar loop returning back to the start. If "
"``end_id`` is supplied then the route is assumed to start and end the the "
"designated ids."
msgstr ""

#: ../../../src/tsp/doc/index.rst:52
msgid "Description"
msgstr ""

#: ../../../src/tsp/doc/index.rst:55
msgid "With Euclidean distances"
msgstr ""

#: ../../../src/tsp/doc/index.rst:56
msgid ""
"The TSP solver is based on ordering the points using straight line "
"(euclidean) distance [#f0]_ between nodes. The implementation is using an "
"approximation algorithm that is very fast. It is not an exact solution, but "
"it is guaranteed that a solution is returned after certain number of "
"iterations."
msgstr ""

#: ../../../src/tsp/doc/index.rst:58
msgid ""
"a SQL query, which should return a set of rows with the following columns:"
msgstr ""

#: ../../../src/tsp/doc/index.rst:64
msgid "``int4`` identifier of the vertex"
msgstr ""

#: ../../../src/tsp/doc/index.rst:65
msgid "``float8`` x-coordinate"
msgstr ""

#: ../../../src/tsp/doc/index.rst:66
msgid "``float8`` y-coordinate"
msgstr ""

#: ../../../src/tsp/doc/index.rst:68
msgid "``int4`` id of the start point"
msgstr ""

#: ../../../src/tsp/doc/index.rst:69
msgid ""
"``int4`` id of the end point, This is *OPTIONAL*, if include the route is "
"optimized from start to end, otherwise it is assumed that the start and the "
"end are the same point."
msgstr ""

#: ../../../src/tsp/doc/index.rst:72
msgid "The function returns set of :ref:`type_cost_result`:"
msgstr ""

#: ../../../src/tsp/doc/index.rst:74 ../../../src/tsp/doc/index.rst:107
msgid "row sequence"
msgstr ""

#: ../../../src/tsp/doc/index.rst:75
msgid "internal index to the distance matric"
msgstr ""

#: ../../../src/tsp/doc/index.rst:76
msgid "``id`` of the node"
msgstr ""

#: ../../../src/tsp/doc/index.rst:77
msgid "cost to traverse from the current node to the next node."
msgstr ""

#: ../../../src/tsp/doc/index.rst:80
msgid "Create a distance matrix"
msgstr ""

#: ../../../src/tsp/doc/index.rst:81
msgid ""
"For users that need a distance matrix we have a simple function that takes "
"SQL in ``sql`` as described above and returns a record with ``dmatrix`` and "
"``ids``."
msgstr ""

#: ../../../src/tsp/doc/index.rst:87
msgid "The function returns a record of ``dmatrix``, ``ids``:"
msgstr ""

#: ../../../src/tsp/doc/index.rst:89
msgid "``float8[][]`` a symeteric Euclidean distance matrix based on ``sql``."
msgstr ""

#: ../../../src/tsp/doc/index.rst:90
msgid ""
"``integer[]`` an array of ids as they are ordered in the distance matrix."
msgstr ""

#: ../../../src/tsp/doc/index.rst:94
msgid "With distance matrix"
msgstr ""

#: ../../../src/tsp/doc/index.rst:95
msgid ""
"For users, that do not want to use Euclidean distances, we also provode the "
"ability to pass a distance matrix that we will solve and return an ordered "
"list of nodes for the best order to visit each. It is up to the user to "
"fully populate the distance matrix."
msgstr ""

#: ../../../src/tsp/doc/index.rst:97
msgid "``float[][]`` distance matrix of points"
msgstr ""

#: ../../../src/tsp/doc/index.rst:98
msgid "``int4`` index of the start point"
msgstr ""

#: ../../../src/tsp/doc/index.rst:99
msgid "``int4`` (optional) index of the end node"
msgstr ""

#: ../../../src/tsp/doc/index.rst:101
msgid ""
"The ``end`` node is an optional parameter, you can just leave it out if you "
"want a loop where the ``start`` is the depot and the route returns back to "
"the depot. If you include the ``end`` parameter, we optimize the path from "
"``start`` to ``end`` and minimize the distance of the route while include "
"the remaining points."
msgstr ""

#: ../../../src/tsp/doc/index.rst:103
msgid ""
"The distance matrix is a multidimensional `PostgreSQL array type "
"<http://www.postgresql.org/docs/9.1/static/arrays.html>`_ that must be ``N x"
" N`` in size."
msgstr ""

#: ../../../src/tsp/doc/index.rst:105
msgid "The result will be N records of ``[ seq, id ]``:"
msgstr ""

#: ../../../src/tsp/doc/index.rst:108
msgid "index into the matrix"
msgstr ""

#: ../../../src/tsp/doc/index.rst:112
msgid "Footnotes"
msgstr ""

#: ../../../src/tsp/doc/index.rst:113
msgid ""
"There was some thought given to pre-calculating the driving distances "
"between the nodes using Dijkstra, but then I read a paper (unfortunately I "
"don't remember who wrote it), where it was proved that the quality of TSP "
"with euclidean distance is only slightly worse than one with real distance "
"in case of normal city layout. In case of very sparse network or rivers and "
"bridges it becomes more inaccurate, but still wholly satisfactory. Of course"
" it is nice to have exact solution, but this is a compromise between quality"
" and speed (and development time also). If you need a more accurate "
"solution, you can generate a distance matrix and use that form of the "
"function to get your results."
msgstr ""

#: ../../../src/tsp/doc/index.rst:117
msgid "History"
msgstr ""

#: ../../../src/tsp/doc/index.rst:118
msgid "Renamed in version 2.0.0"
msgstr ""

#: ../../../src/tsp/doc/index.rst:119
msgid "GAUL dependency removed in version 2.0.0"
msgstr ""

#: ../../../src/tsp/doc/index.rst:123
msgid "Examples"
msgstr ""

#: ../../../src/tsp/doc/index.rst:125
msgid ""
"Using SQL parameter (all points from the table, atarting from 6 and ending "
"at 5)"
msgstr ""

#: ../../../src/tsp/doc/index.rst:150
msgid "Using distance matrix (A loop starting from 1)"
msgstr ""

#: ../../../src/tsp/doc/index.rst:164
msgid "Using distance matrix (Starting from 1, ending at 2)"
msgstr ""

#: ../../../src/tsp/doc/index.rst:178
msgid "The queries use the :ref:`sampledata` network."
msgstr ""

#: ../../../src/tsp/doc/index.rst:182
msgid "See Also"
msgstr ""

#: ../../../src/tsp/doc/index.rst:184
msgid ":ref:`type_cost_result`"
msgstr ""

#: ../../../src/tsp/doc/index.rst:185
msgid "http://en.wikipedia.org/wiki/Traveling_salesman_problem"
msgstr ""

#: ../../../src/tsp/doc/index.rst:186
msgid "http://en.wikipedia.org/wiki/Simulated_annealing"
msgstr ""

#: ../../../src/tsp/doc/index.rst:15
msgid "pgr_tsp(sql text, start_id integer)"
msgstr ""

#: ../../../src/tsp/doc/index.rst:15
msgid "pgr_tsp(sql text, start_id integer, end_id integer)"
msgstr ""

#: ../../../src/tsp/doc/index.rst:15
msgid "pgr_tsp(matrix float[][], start integer)"
msgstr ""

#: ../../../src/tsp/doc/index.rst:15
msgid "pgr_tsp(matrix float[][], start integer, end integer)"
msgstr ""

#: ../../../src/tsp/doc/index.rst:15
msgid "pgr_makeDistanceMatrix(sqlin text)"
msgstr ""
