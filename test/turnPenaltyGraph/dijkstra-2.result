BEGIN;
BEGIN
SET client_min_messages TO NOTICE;
SET
UPDATE edge_table SET id = id * 100, source = 1000 * source, target = 1000 * target;
UPDATE 18
UPDATE edge_table_vertices_pgr SET id = id * 1000;
UPDATE 17
DROP TABLE IF EXISTS result1;
NOTICE:  table "result1" does not exist, skipping
DROP TABLE
SELECT  *, 0 AS edge  INTO result1 FROM pgr_turnPenaltyGraph(
    $$SELECT id, source, target, cost, reverse_cost
    FROM edge_table WHERE id IN (200,400)$$
);
SELECT 6
SELECT * FROM result1;
 seq | source | target | cost | original_source_vertex | original_source_edge | original_target_vertex | original_target_edge | edge 
-----+--------+--------+------+------------------------+----------------------+------------------------+----------------------+------
   1 |      1 |      6 |    1 |                   2000 |                  400 |                   5000 |                  400 |    0
   2 |      2 |      1 |    0 |                   2000 |                 -200 |                   2000 |                  400 |    0
   3 |      3 |      1 |    0 |                   2000 |                 -400 |                   2000 |                  400 |    0
   4 |      4 |      2 |    1 |                   3000 |                 -200 |                   2000 |                 -200 |    0
   5 |      5 |      3 |    1 |                   5000 |                 -400 |                   2000 |                 -400 |    0
   6 |      6 |      5 |    0 |                   5000 |                  400 |                   5000 |                 -400 |    0
(6 rows)

DROP TABLE IF EXISTS temp1;
NOTICE:  table "temp1" does not exist, skipping
DROP TABLE
WITH
rel AS (
    SELECT source, original_source_vertex  FROM result1
    UNION   
    SELECT target, original_target_vertex  FROM result1
),          
unique_rel AS (
    SELECT original_source_vertex, min(source) AS source 
    FROM rel            
    GROUP BY original_source_vertex
),
new_numbers AS (
    SELECT r.seq, u.original_source_vertex AS source, r.target, r.cost, r.edge FROM unique_rel AS u, result1 AS r WHERE u.source = r.source
    UNION               
    SELECT r.seq, r.source, u.original_source_vertex AS target, r.cost, r.edge FROM unique_rel AS u, result1 AS r WHERE u.source = r.target
),
r2 AS (
    SELECT * FROM new_numbers
    UNION
    SELECT r.seq, r.source, r.target, r.cost, r.edge FROM result1 AS r WHERE r.seq NOT IN (SELECT new_numbers.seq AS id FROM new_numbers)
)
SELECT r2.seq, r2.source, r2.target, r2.cost,
    CASE WHEN original_source_edge = original_target_edge THEN original_source_edge
    ELSE r2.edge END AS edge,
    r1.original_source_vertex, r1.original_source_edge,
    r1.original_target_vertex, r1.original_target_edge
INTO temp1
FROM r2 JOIN result1 r1 USING(seq) ORDER by seq;
SELECT 6
SELECT * FROM temp1;
 seq | source | target | cost | edge | original_source_vertex | original_source_edge | original_target_vertex | original_target_edge 
-----+--------+--------+------+------+------------------------+----------------------+------------------------+----------------------
   1 |   2000 |      6 |    1 |  400 |                   2000 |                  400 |                   5000 |                  400
   2 |      2 |   2000 |    0 |    0 |                   2000 |                 -200 |                   2000 |                  400
   3 |      3 |   2000 |    0 |    0 |                   2000 |                 -400 |                   2000 |                  400
   4 |   3000 |      2 |    1 | -200 |                   3000 |                 -200 |                   2000 |                 -200
   5 |   5000 |      3 |    1 | -400 |                   5000 |                 -400 |                   2000 |                 -400
   6 |      6 |   5000 |    0 |    0 |                   5000 |                  400 |                   5000 |                 -400
(6 rows)

DROP TABLE IF EXISTS v_table;
NOTICE:  table "v_table" does not exist, skipping
DROP TABLE
WITH a AS (
    SELECT source AS id, original_source_vertex AS original_id FROM temp1
    UNION
    SELECT target, original_target_vertex FROM temp1)
SELECT *
INTO v_table
FROM a
ORDER BY id;
SELECT 6
DROP TABLE IF EXISTS result2;
NOTICE:  table "result2" does not exist, skipping
DROP TABLE
SELECT seq, source, target, cost, edge INTO result2 FROM temp1;
SELECT 6
DROP TABLE IF EXISTS result2_vertices_pgr;
NOTICE:  table "result2_vertices_pgr" does not exist, skipping
DROP TABLE
WITH foo AS (SELECT source AS id FROM result2
    UNION
    SELECT target FROM result2) 
SELECT *, NULL::BIGINT AS original_id
INTO result2_vertices_pgr
FROM foo
ORDER BY id;
SELECT 6
SELECT * from v_table JOIN result2_vertices_pgr USING (id);
  id  | original_id | original_id 
------+-------------+-------------
    2 |        2000 |            
    3 |        2000 |            
    6 |        5000 |            
 2000 |        2000 |            
 3000 |        3000 |            
 5000 |        5000 |            
(6 rows)

UPDATE result2_vertices_pgr AS r SET original_id = v.id
FROM edge_table_vertices_pgr AS v WHERE v.id = r.id;
UPDATE 3
WITH a AS (SELECT e.id, e.original_id FROM result2_vertices_pgr AS e WHERE original_id IS NOT NULL),
b AS (SELECT * FROM result2 WHERE cost = 0 and target IN (SELECT id FROM a)),
c AS (SELECT * FROM b JOIN result2_vertices_pgr ON(target = id)),
d AS (SELECT c.target, v.original_id FROM c JOIN result2_vertices_pgr as v ON (source=v.id)),
e AS (SELECT DISTINCT c.source, c.original_id FROM c JOIN result2_vertices_pgr AS r ON(source = r.id AND r.original_id IS NULL))
UPDATE result2_vertices_pgr SET original_id = e.original_id FROM e WHERE e.source = id;
UPDATE 3
WITH a AS (SELECT e.id, e.original_id FROM result2_vertices_pgr AS e WHERE original_id IS NOT NULL),
b AS (SELECT * FROM result2 WHERE cost = 0 and source IN (SELECT id FROM a)),
c AS (SELECT * FROM b JOIN result2_vertices_pgr ON(source = id)),
d AS (SELECT c.source, v.original_id FROM c JOIN result2_vertices_pgr as v ON (target=v.id)),
e AS (SELECT DISTINCT c.target, c.original_id FROM c JOIN result2_vertices_pgr AS r ON(target = r.id AND r.original_id IS NULL))
UPDATE result2_vertices_pgr SET original_id = e.original_id FROM e WHERE e.target = id;
UPDATE 0
SELECT * from pgr_dijkstra($$SELECT id, * FROM edge_table$$,
    2000, 5000);
 seq | path_seq | node | edge | cost | agg_cost 
-----+----------+------+------+------+----------
   1 |        1 | 2000 |  400 |    1 |        0
   2 |        2 | 5000 |   -1 |    0 |        1
(2 rows)

DROP TABLE IF EXISTS q_result_1;
NOTICE:  table "q_result_1" does not exist, skipping
DROP TABLE
SELECT * INTO q_result_1
FROM pgr_dijkstra($$SELECT seq AS id, * FROM result2$$,
    (SELECT array_agg(id) FROM result2_vertices_pgr where original_id = 2000),
    (SELECT array_agg(id) FROM result2_vertices_pgr where original_id = 5000)
);
SELECT 19
SELECT * FROM q_result_1;
 seq | path_seq | start_vid | end_vid | node | edge | cost | agg_cost 
-----+----------+-----------+---------+------+------+------+----------
   1 |        1 |         2 |       6 |    2 |    2 |    0 |        0
   2 |        2 |         2 |       6 | 2000 |    1 |    1 |        0
   3 |        3 |         2 |       6 |    6 |   -1 |    0 |        1
   4 |        1 |         2 |    5000 |    2 |    2 |    0 |        0
   5 |        2 |         2 |    5000 | 2000 |    1 |    1 |        0
   6 |        3 |         2 |    5000 |    6 |    6 |    0 |        1
   7 |        4 |         2 |    5000 | 5000 |   -1 |    0 |        1
   8 |        1 |         3 |       6 |    3 |    3 |    0 |        0
   9 |        2 |         3 |       6 | 2000 |    1 |    1 |        0
  10 |        3 |         3 |       6 |    6 |   -1 |    0 |        1
  11 |        1 |         3 |    5000 |    3 |    3 |    0 |        0
  12 |        2 |         3 |    5000 | 2000 |    1 |    1 |        0
  13 |        3 |         3 |    5000 |    6 |    6 |    0 |        1
  14 |        4 |         3 |    5000 | 5000 |   -1 |    0 |        1
  15 |        1 |      2000 |       6 | 2000 |    1 |    1 |        0
  16 |        2 |      2000 |       6 |    6 |   -1 |    0 |        1
  17 |        1 |      2000 |    5000 | 2000 |    1 |    1 |        0
  18 |        2 |      2000 |    5000 |    6 |    6 |    0 |        1
  19 |        3 |      2000 |    5000 | 5000 |   -1 |    0 |        1
(19 rows)

SELECT min(agg_cost) FROM q_result_1 WHERE edge = -1;
 min 
-----
   1
(1 row)

SELECT path_seq, start_vid, end_vid FROM q_result_1 WHERE edge = -1 and agg_cost = 1;
 path_seq | start_vid | end_vid 
----------+-----------+---------
        3 |         2 |       6
        4 |         2 |    5000
        3 |         3 |       6
        4 |         3 |    5000
        2 |      2000 |       6
        3 |      2000 |    5000
(6 rows)

SELECT * FROM q_result_1 WHERE start_vid = 2000 AND end_vid = 6;
 seq | path_seq | start_vid | end_vid | node | edge | cost | agg_cost 
-----+----------+-----------+---------+------+------+------+----------
  15 |        1 |      2000 |       6 | 2000 |    1 |    1 |        0
  16 |        2 |      2000 |       6 |    6 |   -1 |    0 |        1
(2 rows)

SELECT * FROM q_result_1 WHERE start_vid = 2000 AND end_vid = 6 AND (cost != 0 OR edge = -1);
 seq | path_seq | start_vid | end_vid | node | edge | cost | agg_cost 
-----+----------+-----------+---------+------+------+------+----------
  15 |        1 |      2000 |       6 | 2000 |    1 |    1 |        0
  16 |        2 |      2000 |       6 |    6 |   -1 |    0 |        1
(2 rows)

SELECT seq, path_seq, 
    (SELECT original_id FROM result2_vertices_pgr WHERE start_vid = id) AS start_vid, 
    (SELECT original_id FROM result2_vertices_pgr WHERE end_vid = id) AS end_vid,
    (SELECT original_id FROM result2_vertices_pgr WHERE node = id) AS node,
    coalesce((SELECT r.edge FROM result2 AS r WHERE q.edge = r.seq), -1) AS edge, cost, agg_cost
FROM q_result_1 AS q;
 seq | path_seq | start_vid | end_vid | node | edge | cost | agg_cost 
-----+----------+-----------+---------+------+------+------+----------
   1 |        1 |      2000 |    5000 | 2000 |    0 |    0 |        0
   2 |        2 |      2000 |    5000 | 2000 |  400 |    1 |        0
   3 |        3 |      2000 |    5000 | 5000 |   -1 |    0 |        1
   4 |        1 |      2000 |    5000 | 2000 |    0 |    0 |        0
   5 |        2 |      2000 |    5000 | 2000 |  400 |    1 |        0
   6 |        3 |      2000 |    5000 | 5000 |    0 |    0 |        1
   7 |        4 |      2000 |    5000 | 5000 |   -1 |    0 |        1
   8 |        1 |      2000 |    5000 | 2000 |    0 |    0 |        0
   9 |        2 |      2000 |    5000 | 2000 |  400 |    1 |        0
  10 |        3 |      2000 |    5000 | 5000 |   -1 |    0 |        1
  11 |        1 |      2000 |    5000 | 2000 |    0 |    0 |        0
  12 |        2 |      2000 |    5000 | 2000 |  400 |    1 |        0
  13 |        3 |      2000 |    5000 | 5000 |    0 |    0 |        1
  14 |        4 |      2000 |    5000 | 5000 |   -1 |    0 |        1
  15 |        1 |      2000 |    5000 | 2000 |  400 |    1 |        0
  16 |        2 |      2000 |    5000 | 5000 |   -1 |    0 |        1
  17 |        1 |      2000 |    5000 | 2000 |  400 |    1 |        0
  18 |        2 |      2000 |    5000 | 5000 |    0 |    0 |        1
  19 |        3 |      2000 |    5000 | 5000 |   -1 |    0 |        1
(19 rows)

SELECT seq, path_seq, 
    (SELECT original_id FROM result2_vertices_pgr WHERE start_vid = id) AS start_vid, 
    (SELECT original_id FROM result2_vertices_pgr WHERE end_vid = id) AS end_vid,
    (SELECT original_id FROM result2_vertices_pgr WHERE node = id) AS node,
    coalesce((SELECT abs(r.edge) FROM result2 AS r WHERE q.edge = r.seq), -1) AS edge, cost, agg_cost
FROM q_result_1 AS q
WHERE start_vid = 2000 AND end_vid = 6;
 seq | path_seq | start_vid | end_vid | node | edge | cost | agg_cost 
-----+----------+-----------+---------+------+------+------+----------
  15 |        1 |      2000 |    5000 | 2000 |  400 |    1 |        0
  16 |        2 |      2000 |    5000 | 5000 |   -1 |    0 |        1
(2 rows)

SELECT seq, path_seq, 
    (SELECT original_id FROM result2_vertices_pgr WHERE start_vid = id) AS start_vid, 
    (SELECT original_id FROM result2_vertices_pgr WHERE end_vid = id) AS end_vid,
    (SELECT original_id FROM result2_vertices_pgr WHERE node = id) AS node,
    coalesce((SELECT abs(r.edge) FROM result2 AS r WHERE q.edge = r.seq), -1) AS edge, cost, agg_cost
FROM q_result_1 AS q
WHERE start_vid = 2000 AND end_vid = 6 AND (
    cost != 0 OR edge = -1 OR path_seq = 1);
 seq | path_seq | start_vid | end_vid | node | edge | cost | agg_cost 
-----+----------+-----------+---------+------+------+------+----------
  15 |        1 |      2000 |    5000 | 2000 |  400 |    1 |        0
  16 |        2 |      2000 |    5000 | 5000 |   -1 |    0 |        1
(2 rows)

SELECT * from pgr_dijkstra($$SELECT id, * FROM edge_table$$,
    ARRAY[2000]::BIGINT[], ARRAY[5000]::BIGINT[]);
 seq | path_seq | start_vid | end_vid | node | edge | cost | agg_cost 
-----+----------+-----------+---------+------+------+------+----------
   1 |        1 |      2000 |    5000 | 2000 |  400 |    1 |        0
   2 |        2 |      2000 |    5000 | 5000 |   -1 |    0 |        1
(2 rows)

SELECT seq, path_seq, 
    (SELECT original_id FROM result2_vertices_pgr WHERE node = id) AS node,
    coalesce((SELECT abs(r.edge) FROM result2 AS r WHERE q.edge = r.seq), -1) AS edge, cost, agg_cost
FROM q_result_1 AS q
WHERE start_vid = 2000 AND end_vid = 6 AND (
    cost != 0 OR edge = -1 OR path_seq = 1);
 seq | path_seq | node | edge | cost | agg_cost 
-----+----------+------+------+------+----------
  15 |        1 | 2000 |  400 |    1 |        0
  16 |        2 | 5000 |   -1 |    0 |        1
(2 rows)

SELECT * from pgr_dijkstra($$SELECT id, * FROM edge_table$$,
    2000, 5000);
 seq | path_seq | node | edge | cost | agg_cost 
-----+----------+------+------+------+----------
   1 |        1 | 2000 |  400 |    1 |        0
   2 |        2 | 5000 |   -1 |    0 |        1
(2 rows)

ROLLBACK;
ROLLBACK
